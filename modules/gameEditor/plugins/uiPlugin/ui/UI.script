var UI = (function (_super) {

    __extends(UI, _super);

    function UI(data, info) {
        _super.call(this);
        this.data = data;
        this.info = info;
        this.focusEnabeld = true;
        this.addListener(flower.Event.ADDED, this.onAdded, this);
    }

    UI.prototype.onAdded = function (e) {
        this.removeListener(flower.Event.ADDED, this.onAdded, this);
        this.init();
    }

    UI.prototype.init = function () {
        var data = this.data;
        this.container = new flower.Group();
        this.percentWidth = 100;
        this.percentHeight = 100;
        this.addChild(this.container);
        this.display = new data.clazz();
        if (data.isContainer) {

        } else {
            this.container.percentWidth = 100;
            this.container.percentHeight = 100;
        }
        this.container.addChild(this.display);
        var atrs = this.data.getAttributeNames();
        for (var i = 0; i < atrs.length; i++) {
            var atr = data.getAttribute(atrs[i]);
            var display;
            if (data.isContainer) {
                display = this.container;
            } else {
                display = this.display;
            }
            atr.addListener(flower.Event.UPDATE, function (display, name, ui) {
                return function (e) {
                    display[name] = e.data.value;
                    if (ui.info.select == ui) {
                        ui.editor.update();
                    }
                }
            }(display, atrs[i], this));
            atr.exist.addListener(flower.Event.UPDATE, function (display, name, ui) {
                return function (e) {
                    if (e.data.value == false) {
                        display[name] = null;
                        if (ui.info.select == ui) {
                            ui.editor.update();
                        }
                    }
                }
            }(display, atrs[i], this));
            if (atr.exist.value == false) continue;
            if (atr instanceof flower.Value) {
                display[atrs[i]] = atr.value;
            } else {
                display[atrs[i]] = atr;
            }
        }
        for (var i = 0; i < data.numElement; i++) {
            var childData = data.getElementAt(i);
            if (childData.isDisplay) {
                var child = new UI(childData, this.info);
                this.container.addChild(child);
            }
        }
        this.editor = new module.UIEditor(this.data, display);
        this.addChild(this.editor);
        this.display.addListener(flower.TouchEvent.TOUCH_BEGIN, this.onTouchBegin, this);
        this.editor.addListener(flower.TouchEvent.TOUCH_BEGIN, this.onTouchBegin, this);
    }

    UI.prototype.onTouchBegin = function (e) {
        if (e.currentTarget == this.display || e.target == this.editor.nameTxt) {
            this.startDrag();
            this.addListener(flower.DragEvent.DRAG_END, this.onDragEnd, this);
            flower.EnterFrame.add(this.dragUpdate, this);
        }
        if (this.info.select == this) {
            return;
        }
        if (this.info.select) {
            this.info.select.unselected();
        }
        this.info.select = this;
        this.info.select.selected();

        if (!UI.detailPanel) {
            UI.detailPanel = new module.UIAttributePanel(this.data);
        }
        var event = new editor.ModuleEvent(editor.ModuleEvent.SHOW_DETAIL, {
            "type": "element",
            data: this.data,
            panel: UI.detailPanel
        });
        editor.EventManager.instance.dispatch(event);
    }

    UI.prototype.dragUpdate = function (gap, time) {
        this.data.getAttributeShow("x").value = this.data.getAttribute("x").value + this.x;
        this.data.getAttributeShow("y").value = this.data.getAttribute("y").value + this.y;
    }

    UI.prototype.onDragEnd = function (e) {
        flower.EnterFrame.remove(this.dragUpdate, this);
        this.data.getAttribute("x").value = this.data.getAttribute("x").value + this.x;
        this.data.getAttribute("y").value = this.data.getAttribute("y").value + this.y;
        this.x = this.y = 0;
        this.editor.update();
    }

    UI.prototype.selected = function () {
        this.editor.show();
    }

    UI.prototype.unselected = function () {
        this.editor.hide();
    }

    UI.prototype.dispose = function () {
        this.editor.dispose();
        _super.dispose.call(this);
    }

    return UI;

})(flower.Group);

module.UI = UI;