var UIEditor = (function (_super) {

    __extends(UIEditor, _super);

    function UIEditor(data, display) {
        _super.call(this);
        this.data = data;
        this.display = display;
        this.width = this.height = 0;
        if (data.isContainer) {
            var nameTxt = new flower.TextField();
            this.nameTxt = nameTxt;
            nameTxt.text = data.className;
            nameTxt.fontColor = 0;
            nameTxt.alpha = 0.2;
            nameTxt.rotation = this.getAttribute("rotation");
            this.addChild(nameTxt);
        }
        this.anchorX = 0.5;
        this.anchorY = 0.5;
        this.points = null;
        this.box = null;
    }


    UIEditor.prototype.show = function () {
        this.update();
        this.box.visible = true;
        for (var key in this.points) {
            this.points[key].visible = true;
        }
        if (this.nameTxt) {
            this.nameTxt.alpha = 0.5;
        }
        flower.EnterFrame.add(this.checkSize, this);
    }

    UIEditor.prototype.hide = function () {
        this.box.visible = false;
        for (var key in this.points) {
            this.points[key].visible = false;
        }
        if (this.nameTxt) {
            this.nameTxt.alpha = 0.2;
        }
        flower.EnterFrame.remove(this.checkSize, this);
    }

    UIEditor.prototype.getAttribute = function (name) {
        return this.data.getAttributeValue(name);
    }

    UIEditor.prototype.setAttribute = function (name, value) {
        return this.data.getAttribute(name).value = value;
    }

    UIEditor.prototype.checkSize = function () {
        //var width, height;
        //if (this.display instanceof flower.Bitmap) {
        //    width = this.display.width;
        //    height = this.display.height;
        //}
        //if (width != this.info.width || height != this.info.height) {
        //    this.update(width, height);
        //}
        this.update();
    }

    UIEditor.prototype.update = function () {
        this.x = this.display.x;
        this.y = this.display.y;
        var width = this.display.width;
        var height = this.display.height;
        var x = 0;
        var y = 0;
        var scaleX = this.getAttribute("scaleX");
        var scaleY = this.getAttribute("scaleY");
        var rotation = this.getAttribute("rotation");
        this.info = {
            x: this.x,
            y: this.y,
            width: width,
            height: height,
            scaleX: scaleX,
            scaleY: scaleY,
            rotation: rotation
        };
        if (!this.box) {
            this.box = new flower.Shape();
            this.box.fillAlpha = 0;
            this.box.lineWidth = 1;
            this.box.lineColor = 0x000000;
            this.box.touchEnabled = false;
            this.addChild(this.box);
        }
        this.box.clear();
        this.box.drawRect(0, 0, width, height);
        this.box.x = x;
        this.box.y = y;
        this.box.scaleX = scaleX;
        this.box.scaleY = scaleY;
        this.box.rotation = rotation;
        if (this.nameTxt) this.nameTxt.rotation = rotation;
        if (!this.points) {
            this.points = {};
            this.points.top1 = new flower.Sprite();
            this.points.top2 = new flower.Sprite();
            this.points.top3 = new flower.Sprite();
            this.points.left = new flower.Sprite();
            this.points.right = new flower.Sprite();
            this.points.bottom1 = new flower.Sprite();
            this.points.bottom2 = new flower.Sprite();
            this.points.bottom3 = new flower.Sprite();
            this.points.center = new flower.Sprite();
            var shaders = {
                top1: [-24, -24, 30, 30],
                top2: [-10, -10, 20, 20],
                top3: [-6, -24, 30, 30],
                left: [-10, -10, 20, 20],
                right: [-10, -10, 20, 20],
                bottom1: [-24, -6, 30, 30],
                bottom2: [-10, -10, 20, 20],
                bottom3: [-6, -6, 30, 30],
                center: [-5, -5, 10, 10]
            }
            for (var key in this.points) {
                var sprite = this.points[key];
                var shader = new flower.Shape();
                shader.fillColor = 0x000000;
                shader.alpha = 0;
                shader.drawRect(shaders[key][0], shaders[key][1], shaders[key][2], shaders[key][3]);
                sprite.addChild(shader);
                sprite.shader = shader;
                var point = new flower.Shape();
                sprite.addChild(point);
                point.lineWidth = 1;
                if (key == "center") {
                    point.lineColor = 0x000000;
                    point.fillColor = 0xffffff;
                } else {
                    point.lineColor = 0xffffff;
                    point.fillColor = 0x000000;
                }
                point.drawRect(-3, -3, 6, 6);
                sprite.point = point;
                this.addChild(sprite);
            }
            for (var key in this.points) {
                this.points[key].rotation = rotation;
                this.points[key].addListener(flower.TouchEvent.TOUCH_BEGIN, this.touchPointBegin, this);
                this.points[key].addListener(flower.TouchEvent.TOUCH_MOVE, this.touchPointMove, this);
                this.points[key].addListener(flower.TouchEvent.TOUCH_END, this.touchPointEnd, this);
                this.points[key].addListener(flower.TouchEvent.TOUCH_RELEASE, this.touchPointEnd, this);
            }
        }
        var rad = rotation * Math.PI / 180;
        var names = {
            "top1": {x: 0, y: 0},
            "top2": {x: 0.5, y: 0},
            "top3": {x: 1, y: 0},
            "left": {x: 0, y: 0.5},
            "right": {x: 1, y: 0.5},
            "bottom1": {x: 0, y: 1},
            "bottom2": {x: 0.5, y: 1},
            "bottom3": {x: 1, y: 1},
            "center": {x: this.anchorX, y: this.anchorY}
        };
        for (var key in names) {
            var point = this.points[key];
            point.percentX = names[key].x;
            point.percentY = names[key].y;
            var x = width * names[key].x;
            var y = height * names[key].y;
            x *= scaleX;
            y *= scaleY;
            var r = Math.atan2(y, x);
            var sin = Math.sin(r + rad);
            var cos = Math.cos(r + rad);
            point.x = Math.sqrt(x * x + y * y) * cos;
            point.y = Math.sqrt(x * x + y * y) * sin;
            point.rotation = rotation;
        }
    }

    /**
     * 准备编辑
     * @param e
     */
    UIEditor.prototype.touchPointBegin = function (e) {
        //记录初始信息
        var point = e.currentTarget;
        this.start = {};
        for (var key in this.info) {
            this.start[key] = this.info[key];
        }
        this.start.pointX = point.x + this.start.x;
        this.start.pointY = point.y + this.start.y;
        this.start.touchX = e.stageX;
        this.start.touchY = e.stageY;
        this.start.centerX = this.points.center.x + this.start.x;
        this.start.centerY = this.points.center.y + this.start.y;
        this.start.originX = this.points.top1.x + this.start.x;
        this.start.originY = this.points.top1.y + this.start.y;
        this.start.radX = this.points.top3.x + this.start.x;
        this.start.radY = this.points.top3.y + this.start.y;
        this.start.anchorX = this.anchorX;
        this.start.anchorY = this.anchorY;
        if ((point == this.points.top1 || point == this.points.top3 ||
            point == this.points.bottom1 || point == this.points.bottom3) && (Math.abs(e.touchX) > 5 || Math.abs(e.touchY) > 5)) {
            this.rotate = true;
        } else {
            this.rotate = false;
        }
    }

    /**
     * 编辑中
     * @param e
     */
    UIEditor.prototype.touchPointMove = function (e) {
        //编辑中
        var point = e.currentTarget;
        var pointX = e.stageX + this.start.pointX - this.start.touchX;
        var pointY = e.stageY + this.start.pointY - this.start.touchY;
        if (this.rotate) {//旋转
            //把之前的点(鼠标拖动的那个点)转换为以旋转中心为原点的相对坐标
            var px1 = this.start.pointX - this.start.centerX;
            var py1 = this.start.pointY - this.start.centerY;

            //把现在的点转换为以旋转中心为原点的相对坐标
            var px2 = pointX - this.start.centerX;
            var py2 = pointY - this.start.centerY;

            //计算点的旋转角度，根据向量的叉乘和点乘获得 sin 和 cos
            var sin = (px1 * py2 - py1 * px2) / (Math.sqrt(px1 * px1 + py1 * py1) * Math.sqrt(px2 * px2 + py2 * py2));
            var cos = (px1 * px2 + py1 * py2) / (Math.sqrt(px1 * px1 + py1 * py1) * Math.sqrt(px2 * px2 + py2 * py2));

            //根据点的旋转公式 newX = l * cos(r + a) = l * cos(r) * cos(a) - l * sin(r) * sin(a) = x * cos(a) - y * sin(a)
            //以及 newY = l * sin(r + a) = l * sin(r) * cos(a) + l * cos(r) * sin(a) = y * cos(a) + x * sin(a)
            var originX = (this.start.originX - this.start.centerX) * cos - (this.start.originY - this.start.centerY) * sin;
            var originY = (this.start.originY - this.start.centerY) * cos + (this.start.originX - this.start.centerX) * sin;

            //计算出 top3 旋转过后的坐标
            var radX = (this.start.radX - this.start.centerX) * cos - (this.start.radY - this.start.centerY) * sin;
            var radY = (this.start.radY - this.start.centerY) * cos + (this.start.radX - this.start.centerX) * sin;

            //根据 top1 和 top3 的夹角算出新的旋转角度
            var r = Math.atan2(radY - originY, radX - originX);
            r = r * 180 / Math.PI;
            if (r < 3 && r > -3 || r < -177 && r > -177) {
                if (r < 5 && r > -5) r = 0;
                if (r < -175 && r > -185) r = -180;
                var rad = (-this.start.rotation + r) * Math.PI / 180;
                var x = this.start.originX - this.start.centerX;
                var y = this.start.originY - this.start.centerY;
                originX = x * Math.cos(rad) - y * Math.sin(rad);
                originY = y * Math.cos(rad) + x * Math.sin(rad);
            }
            this.setAttribute("rotation", r);
            //根据相对坐标算出绝对坐标
            originX = originX + this.start.centerX;
            originY = originY + this.start.centerY;
            this.setAttribute("x", originX);
            this.setAttribute("y", originY);
        } else {
            if (point == this.points.center) {//移动 center(中心点)
                //把 center 转换到，以 top1、top3 为 x 轴，以 top1、bottom1 为 y 轴的坐标系中
                var x = pointX - this.start.originX;
                var y = pointY - this.start.originY;
                r = this.start.rotation * Math.PI / 180;
                pointX = x * Math.cos(r) + y * Math.sin(r);
                pointY = y * Math.cos(r) - x * Math.sin(r);
                this.anchorX = Math.floor((pointX / this.start.width) * 20) / 20;
                this.anchorY = Math.floor((pointY / this.start.height) * 20) / 20;
            } else {//缩放
                var rad = (-this.start.rotation) * Math.PI / 180;
                //把之前的点(鼠标拖动的那个点)转换为以旋转中心为原点的相对坐标
                var x = this.start.pointX - this.start.centerX;
                var y = this.start.pointY - this.start.centerY;
                var px1 = x * Math.cos(rad) - y * Math.sin(rad);
                var py1 = y * Math.cos(rad) + x * Math.sin(rad);

                //把现在的点转换为以旋转中心为原点的相对坐标
                x = pointX - this.start.centerX;
                y = pointY - this.start.centerY;
                var px2 = x * Math.cos(rad) - y * Math.sin(rad);
                var py2 = y * Math.cos(rad) + x * Math.sin(rad);

                if (point == this.points.top2 || point == this.points.bottom2) px2 = px1;
                if (point == this.points.left || point == this.points.right) py2 = py1;

                x = this.start.originX - this.start.centerX;
                y = this.start.originY - this.start.centerY;

                //把之前的原点 (0,0) 转到相对于 center(带旋转角度的) 的坐标系中
                var originX = x * Math.cos(rad) - y * Math.sin(rad);
                var originY = y * Math.cos(rad) + x * Math.sin(rad);

                //获取拉伸之后的原点(拉伸之后就不是 (0,0) 点了)坐标
                x = originX * (Math.abs(px1) < 0.1 ? 1 : (px2 / px1)) - originX;
                y = originY * (Math.abs(py1) < 0.1 ? 1 : (py2 / py1)) - originY;

                //把新原点(拉伸之后就不是 (0,0) 点了)转换到原点坐标系(没有旋转角度的)
                rad = (this.start.rotation) * Math.PI / 180;
                originX = x * Math.cos(rad) - y * Math.sin(rad);
                originY = y * Math.cos(rad) + x * Math.sin(rad);

                //获取新原点相对上层的坐标
                var startX = originX + this.start.originX;
                var startY = originY + this.start.originY;

                //获取新的宽高
                var width = this.start.width * (Math.abs(px1) < 0.1 ? 1 : (px2 / px1));
                var height = this.start.height * (Math.abs(py1) < 0.1 ? 1 : (py2 / py1));
                if (width < 0) { //如果宽为负需要处理
                    x = -width;
                    y = 0;
                    var moveX = x * Math.cos(rad) - y * Math.sin(rad);
                    var moveY = y * Math.cos(rad) + x * Math.sin(rad);
                    width = -width;
                    startX -= moveX;
                    startY -= moveY;
                    this.anchorX = 1 - this.start.anchorX;
                } else {
                    this.anchorX = this.start.anchorX;
                }
                if (height < 0) { //如果高为负需要处理
                    x = 0;
                    y = -height;
                    var moveX = x * Math.cos(rad) - y * Math.sin(rad);
                    var moveY = y * Math.cos(rad) + x * Math.sin(rad);
                    height = -height;
                    startX -= moveX;
                    startY -= moveY;
                    this.anchorY = 1 - this.start.anchorY;
                } else {
                    this.anchorY = this.start.anchorY;
                }
                //设置新的位置和宽高
                this.setAttribute("x", startX);
                this.setAttribute("y", startY);
                this.setAttribute("width", width);
                this.setAttribute("height", height);
            }
        }
        this.update();
    }

    UIEditor.prototype.touchPointEnd = function (e) {
        var point = e.currentTarget;
    }

    return UIEditor;

})(flower.Sprite);

module.UIEditor = UIEditor;