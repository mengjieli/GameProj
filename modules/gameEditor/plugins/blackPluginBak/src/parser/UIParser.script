var UIParser = (function (_super) {

    __extends(UIParser, _super);

    function UIParser(xml, data) {
        _super.call(this);
        this.xml = xml;
        this.data = data;
        this.data.xml = xml;
    }

    UIParser.prototype.load = function () {
        //分析类名
        var name = this.xml.name;
        var namespace = name.split(":")[0];
        var className = name.split(":")[1];
        if (namespace == "f") {
            this.data.display = flower.DataManager.createData("uieditor." + className);
            this.data.name = className;
        }
        var display = this.data.display;
        for (var i = 0; i < this.xml.attributes.length; i++) {
            var attribute = this.xml.attributes[i];
            var attributeValue = flower.DataManager.createData("uieditor.AttributeValue");
            attributeValue.name = attribute.name;
            attributeValue.content = new flower.StringValue(attribute.value);
            this.data.attributes.push(attributeValue);
            if (display.hasMember(attribute.name)) {
                display[attribute.name].value = attribute.value;
            }
        }
        for (var i = 0; i < this.xml.elements.length; i++) {
            var element = this.xml.elements[i];
            var namespace = element.name.split(":")[0];
            var name = element.name.split(":")[1];
            if (namespace == "f" && name.charCodeAt(0) >= "a".charCodeAt(0) && name.charCodeAt(0) <= "z".charCodeAt(0)) { //属性
                var attributeValue = flower.DataManager.createData("uieditor.AttributeValue");
                attributeValue.name = name;
                if (element.value != "") { //普通文字属性
                    attributeValue.content = new flower.StringValue(element.value);
                } else {
                    var clazz = flower[name];
                    if ((new clazz()) instanceof flower.DisplayObject) { //如果是 ui 属性
                        var data = flower.DataManager.createData("uieditor.UI");
                        attributeValue.content = data;
                        var ui = new UIParser(element.elements[0], data);
                        ui.addListener(flower.Event.COMPLETE, this.loadUIComplete, this);
                        ui.load();
                    } else { //其它非显示对象属性
                        attributeValue.content = this.decodeNoDisplay(element);
                    }
                }
                this.data.attributes.push(attributeValue);
            } else {
                var data = flower.DataManager.createData("uieditor.UI");
                this.data.children.push(data);
                var ui = new UIParser(element, data);
                ui.addListener(flower.Event.COMPLETE, this.loadUIComplete, this);
                ui.load();
            }
        }
        this.loadUIComplete();
    }

    UIParser.prototype.loadUIComplete = function () {
        for (var i = 0; i < this.data.attributes; i++) {
            if (this.data.attributes[i] instanceof black.UIParser && !this.data.attributes[i].isReady) {
                return;
            }
        }
        for (var i = 0; i < this.data.children.length; i++) {
            if (!this.data.children[i].isReady) {
                return;
            }
        }
        this.data.isReady = true;
        new flower.CallLater(this.dispatchWith, this, [flower.Event.COMPLETE]);
    }

    UIParser.prototype.decodeNoDisplay = function (xml) {

    }

    //Object.defineProperty(UIParser.prototype, "itemId", {
    //    get: function () {
    //        this.data.itemId.value = this.data.itemId.value + 1;
    //        return this.data.itemId.value;
    //    },
    //    set: function (val) {
    //    },
    //    enumerable: true,
    //    configurable: true
    //});


    return UIParser;

})(flower.EventDispatcher);

module.UIParser = UIParser;