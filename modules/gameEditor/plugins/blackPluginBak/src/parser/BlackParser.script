var BlackParser = (function (_super) {

    __extends(BlackParser, _super);

    function BlackParser(file) {
        _super.call(this, file);
    }

    BlackParser.prototype.load = function () {
        this.data = flower.DataManager.createData("uieditor.UIFile");
        var xml = new flower.XMLElement();
        xml.parse(this.file.content);
        //分析 namesapce
        for (var i = 0; i < xml.namespaces.length; i++) {
            var namespace = flower.DataManager.createData("uieditor.NameSpace");
            namespace.name.value = xml.namespaces[i].name;
            namespace.content.value = xml.namespaces[i].value;
            this.data.namespaces.push(namespace);
        }
        //分析导出类
        if (xml.getAttribute("class")) {
            this.data.exportClass.value = xml.getAttribute("class").value;
        }
        this.data.ui.file = this.data;
        var parser = new UIParser(xml, this.data.ui);
        parser.addListener(flower.Event.COMPLETE, this.loadComplete, this);
        parser.load();
        return true;
    }

    BlackParser.prototype.loadComplete = function () {
        this.dispatchWith(flower.Event.COMPLETE);
    }

    BlackParser.prototype.save = function () {
    }

    //Object.defineProperty(BlackParser.prototype, "itemId", {
    //    get: function () {
    //        this.data.itemId.value = this.data.itemId.value + 1;
    //        return this.data.itemId.value;
    //    },
    //    set: function (val) {
    //    },
    //    enumerable: true,
    //    configurable: true
    //});

    return BlackParser;

})(editor.Parser);

module.BlackParser = BlackParser;
registerParser("Black", BlackParser);