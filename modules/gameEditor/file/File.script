var File = (function (_super) {

    __extends(File, _super);
    /**
     *
     * @param isDirection
     * @param path
     * @param name
     * @param type
     * @constructor
     */
    function File(isDirection, path, name, type, menu) {
        _super.call(this);
        this.__isDirection = isDirection;
        this.__path = path;
        this.__name = name;
        this.__type = type;
        this.__menu = menu;
        this.__parser = null;
        this.ready = false;
        this.waitForOpen = false;
        this.isLoading = false;
        this.content = null;
    }

    File.prototype.load = function () {
        this.isLoading = true;
        var loader = new flower.URLLoader(this.path);
        loader.addListener(flower.Event.COMPLETE, this.onLoadConfig, this);
        loader.addListener(flower.Event.ERROR, this.onLoadConfigError, this);
        loader.load();
    }

    File.prototype.onLoadConfig = function (e) {
        this.content = e.data;
        var clazz = editor.PluginManager.getParser(this.__type);
        //if (!clazz) {
        //    software.Alert.show("没有找到对应的解析器:" + this.__type);
        //    return;
        //}
        this.__parser = new clazz(this);
        if (this.__parser) {
            if (this.__parser.load()) {
                this.__parser.addListener(flower.Event.COMPLETE, this.onLoadComplete, this);
                this.__parser.addListener(flower.Event.ERROR, this.onParserLoadError, this);
            } else {
                this.onLoadComplete();
            }
        } else {
            this.onLoadComplete();
        }
    }

    File.prototype.onLoadComplete = function () {
        this.isLoading = false;
        if (this.waitForOpen) {
            this.waitForOpen = false;
            editor.EventManager.instance.dispatchWith(editor.ModuleEvent.VIEW_FILE, this);
        }
        this.dispatchWith(flower.Event.COMPLETE);
    }

    File.prototype.onLoadConfigError = function (e) {
        if (this.hasListener(flower.Event.ERROR)) {
            this.dispatch(e);
        } else {
            throw "加载置文件错误:" + e.currentTarget.url;
        }
    }

    File.prototype.onParserLoadError = function (e) {
        if (this.hasListener(flower.Event.ERROR)) {
            this.dispatch(e);
        } else {
            throw e.data;
        }
    }

    File.prototype.openFile = function () {
        if (!this.ready) {
            this.waitForOpen = true;
            if (!this.isLoading) {
                this.load();
            }
        } else {
            editor.EventManager.instance.dispatchWith(editor.ModuleEvent.VIEW_FILE, this);
        }
    }

    File.prototype.__getParser = function () {
        return this.__parser;
    }

    Object.defineProperty(File.prototype, "isDirection", {
        get: function () {
            return this.__isDirection;
        },
        set: function (val) {
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(File.prototype, "path", {
        get: function () {
            return this.__path;
        },
        set: function (val) {
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(File.prototype, "name", {
        get: function () {
            return this.__name;
        },
        set: function (val) {
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(File.prototype, "type", {
        get: function () {
            return this.__type;
        },
        set: function (val) {
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(File.prototype, "pluginName", {
        get: function () {
            return this.__type;
        },
        set: function (val) {
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(File.prototype, "menu", {
        get: function () {
            return this.__menu;
        },
        set: function (val) {
            this.__menu = val;
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(File.prototype, "parser", {
        get: function () {
            return this.__getParser();
        },
        set: function (val) {
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(File.prototype, "data", {
        get: function () {
            return this.parser == null ? null : this.parser.data;
        },
        set: function (val) {
        },
        enumerable: true,
        configurable: true
    });

    return File;
})(flower.EventDispatcher);


module.File = File;